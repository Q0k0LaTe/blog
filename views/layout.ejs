<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <!-- Fixed CSS path -->
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        /* Fallback styles in case external CSS doesn't load */
        body { 
            font-family: 'EB Garamond', Georgia, serif; 
            line-height: 1.7; 
            margin: 0; 
            padding: 0; 
            color: #2d2d2d;
            background: #fefefe;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 0 20px; 
        }
        .header { 
            background: #f8f6f0; 
            border-bottom: 3px solid #d4af37;
            padding: 3rem 0 2rem; 
        }
        .header h1 {
            color: #1a1a1a;
            font-size: 3rem;
            margin-bottom: 0.5rem;
            text-align: center;
            font-weight: 400;
        }
        .card { 
            background: white; 
            padding: 2.5rem; 
            margin: 2rem 0; 
            border-radius: 2px; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            border: 1px solid rgba(212, 175, 55, 0.1);
        }
    </style>
    
    <!-- MathJax Configuration -->
    <script>
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']],
                processEscapes: true,
                processEnvironments: true
            },
            options: {
                skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
            }
        };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
    <header class="header">
        <div class="container">
            <h1>Life & Mathematics</h1>
            <p>Exploring the beautiful intersection of mathematical thinking and human experience</p>
            <nav class="nav">
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/about">About</a></li>
                    <li><a href="/blog">Blog</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <%- body %>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; <%= new Date().getFullYear() %> Life & Mathematics. All rights reserved.</p>
        </div>
    </footer>
    
    <!-- TikZ.js for TikZ rendering - Using correct CDN -->
    <script src="https://cdn.jsdelivr.net/npm/tikzjs@1.0.0/dist/tikz.js"></script>
    
    <!-- Re-render MathJax and TikZ after page load -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Page loaded, initializing renderers...');
            
            // Re-render MathJax first
            if (window.MathJax) {
                MathJax.typesetPromise().then(() => {
                    console.log('‚úì MathJax rendered successfully');
                }).catch((err) => {
                    console.error('‚ùå MathJax error:', err);
                });
            } else {
                console.warn('‚ö†Ô∏è MathJax not available');
            }
            
            // Process TikZ diagrams after MathJax
            setTimeout(() => {
                processTikzDiagrams();
            }, 500);
        });

        function processTikzDiagrams() {
            console.log('üé® Starting TikZ processing...');
            
            // Check if TikZ.js is loaded
            if (typeof tikz === 'undefined') {
                console.error('‚ùå TikZ.js library not loaded');
                
                // Show error in all TikZ containers
                const containers = document.querySelectorAll('.tikz-container');
                containers.forEach(container => {
                    container.innerHTML = `
                        <div style="color: #d32f2f; text-align: center;">
                            <p>‚ùå TikZ.js library failed to load</p>
                            <small>Check your internet connection or try refreshing the page</small>
                        </div>
                    `;
                });
                return;
            }
            
            // Find all TikZ code blocks
            const tikzBlocks = document.querySelectorAll('.tikz-code');
            console.log(`üìù Found ${tikzBlocks.length} TikZ diagrams to render`);
            
            if (tikzBlocks.length === 0) {
                console.log('‚ÑπÔ∏è No TikZ diagrams found on this page');
                return;
            }
            
            tikzBlocks.forEach((codeBlock, index) => {
                try {
                    const tikzCode = codeBlock.textContent.trim();
                    console.log(`üîß Rendering TikZ diagram ${index + 1}:`, tikzCode.substring(0, 50) + '...');
                    
                    // Find the parent container
                    const container = codeBlock.closest('.tikz-container');
                    if (!container) {
                        console.error(`‚ùå No container found for TikZ block ${index + 1}`);
                        return;
                    }
                    
                    // Render the TikZ code to SVG
                    const svg = tikz.tex2svg(tikzCode);
                    
                    // Create a new rendered container
                    const renderedContainer = document.createElement('div');
                    renderedContainer.className = 'tikz-rendered';
                    renderedContainer.appendChild(svg);
                    
                    // Replace the entire container with the rendered one
                    container.parentNode.replaceChild(renderedContainer, container);
                    
                    console.log(`‚úÖ TikZ diagram ${index + 1} rendered successfully`);
                    
                } catch (error) {
                    console.error(`‚ùå Error rendering TikZ diagram ${index + 1}:`, error);
                    
                    // Find the parent container
                    const container = codeBlock.closest('.tikz-container');
                    if (container) {
                        // Show error message with the original code
                        const tikzCode = codeBlock.textContent.trim();
                        container.innerHTML = `
                            <div class="tikz-error">
                                <p>‚ùå TikZ Rendering Error</p>
                                <pre><code>${tikzCode}</code></pre>
                                <small>Error: ${error.message}</small>
                            </div>
                        `;
                    }
                }
            });
            
            console.log('üé® TikZ processing completed');
        }
    </script>
</body>
</html>